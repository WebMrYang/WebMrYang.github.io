{"./":{"url":"./","title":"首页","keywords":"","body":"Introduction 换一台电脑打开GitBook项目居然运行不了，gitbook serve和gitbook build都报错。 Error: ENOENT: no such file or directory, stat ‘C:*demo_book_book\\gitbook\\gitbook-plugin-fontsettings\\fontsettings.js’ 原来是一个Bug（Vesion：3.2.3）。 https://github.com/GitbookIO/gitbook/issues/1309 解决办法如下。 用户目录下找到以下文件。 .gitbook\\versions\\3.2.3\\lib\\output\\website\\copyPluginAssets.js Replace all confirm: true with confirm: false gitbook fetch 2.6.7 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/updateRecord.html":{"url":"gitbook/updateRecord.html","title":"更新记录","keywords":"","body":"更新记录 换一台电脑打开GitBook项目居然运行不了，gitbook serve和gitbook build都报错。 Error: ENOENT: no such file or directory, stat ‘C:*demo_book_book\\gitbook\\gitbook-plugin-fontsettings\\fontsettings.js’ 原来是一个Bug（Vesion：3.2.3）。 https://github.com/GitbookIO/gitbook/issues/1309 解决办法如下。 用户目录下找到以下文件。 .gitbook\\versions\\3.2.3\\lib\\output\\website\\copyPluginAssets.js Replace all confirm: true with confirm: false gitbook fetch 2.6.7 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/meun.html":{"url":"gitbook/meun.html","title":"文档库目录","keywords":"","body":"文档库目录 首页 更新记录 文档库目录 留言板 CSS JavaScript Regular Node Mysql 其他资料库 Markdown_Website Markdown GitBook 建站 环境搭建 插件 发布 开发问题记录 GitHub 发布 SSH Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-26 16:06:36 "},"gitbook/messageBoard.html":{"url":"gitbook/messageBoard.html","title":"留言板","keywords":"","body":"留言板 使用gitalk来进行留言 var gitalk = new Gitalk({ \"clientID\": \"8c2f22bd64d1ea012ac5\", \"clientSecret\": \"992cdea444e1503ceac91bfd74907b37e590a159\", \"repo\": \"webmryang.github.io\", \"owner\": \"WebMrYang\", \"admin\": [\"WebMrYang\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-25 16:50:11 "},"gitbook/CSS-library/":{"url":"gitbook/CSS-library/","title":"CSS","keywords":"","body":"CSS Mysql-library Transitions, Transforms和Animation Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 15:17:41 "},"gitbook/CSS-library/Flex.html":{"url":"gitbook/CSS-library/Flex.html","title":"Flex","keywords":"","body":"一、Flex布局是什么？ Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为Flex布局（行内元素也可以）。 二、基本概念 采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目” 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 三、容器的属性 以下6个属性设置在容器上。 flex-direction flex-wrap flex-flow justify-content align-items align-content 3.1 flex-direction属性 flex-direction属性决定主轴的方向（即项目的排列方向）。 .box { flex-direction: row | row-reverse | column | column-reverse;} 3.2 flex-wrap属性 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。 .box{ flex-wrap: nowrap | wrap | wrap-reverse;} 3.3 flex-flow flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 .box { flex-flow: row nowrap ;} 3.4 justify-content属性 justify-content属性定义了项目在主轴上的对齐方式。 .box { justify-content: flex-start | flex-end | center | space-between | space-around;} 3.5 align-items属性 align-items属性定义项目在交叉轴上如何对齐。 .box { align-items: flex-start | flex-end | center | baseline | stretch;} 它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。 flex-start：交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 3.6 align-content属性 align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 .box { align-content: flex-start | flex-end | center | space-between | space-around | stretch;} 四、项目的属性 以下6个属性设置在项目上。 order flex-grow flex-shrink flex-basis flex align-self 4.1 order属性 order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。 .item { order: ;} 4.2 flex-grow属性 flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 .item { flex-grow: ; /* default 0 */} 4.3 flex-shrink属性 flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 .item { flex-shrink: ; /* default 1 */} 4.4 flex-basis属性 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 .item { flex-basis: | auto; /* default auto */} 4.5 flex属性 flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 .item { flex: none | [ ? || ]} 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 4.6 align-self属性 align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 .item { align-self: auto | flex-start | flex-end | center | baseline | stretch;} 五、尝试 Document * { border: 0px; padding: 0px; margin: 0px; } .main { display: flex; height: 100vh; /* flex-direction: row; flex-wrap: wrap-reverse; */ flex-flow: row wrap-reverse; /* flex-flow: row nowrap; align-items: center ; */ justify-content: space-around; align-content: center; } .main div:first-child, .main div:last-child { height: 100px; } .main div { height: 200px; width: 100px; border: 1px solid red; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-09 18:31:48 "},"gitbook/CSS-library/BoxCenter.html":{"url":"gitbook/CSS-library/BoxCenter.html","title":"居中效果","keywords":"","body":"一、 圣杯 代码 css: #hd{ height:50px; background: #666; text-align: center; } #bd{ /*左右栏通过添加负的margin放到正确的位置了，此段代码是为了摆正中间栏的位置*/ padding:0 200px 0 180px; height:100px; } #middle{ float:left; width:100%;/*左栏上去到第一行*/ height:100px; background:blue; } #left{ width:180px; height:100px; background:#0c9; float:left; margin-left:-100%; /*中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置*/ position:relative; left:-180px; } #right{ width:200px; height:100px; background:#0c9; float:left; margin-left:-200px; /*中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置*/ position:relative; right:-200px; } #footer{ height:50px; background: #666; text-align: center; } html: header middle left right footer 二、双飞翼 #hd{ height:50px; background: #666; text-align: center; } #middle{ float:left; width:100%;/*左栏上去到第一行*/ height:100px; background:blue; } #left{ width:180px; height:100px; background:#0c9; float:left; margin-left:-100%; } #right{ width:200px; height:100px; background:#0c9; float:left; margin-left:-200px; } /*给内部div添加margin，把内容放到中间栏，其实整个背景还是100%*/ #inside{ margin:0 200px 0 180px; height:100px; } #footer{ clear:both; /*记得清楚浮动*/ height:50px; background: #666; text-align: center; } html: middle left right 三、区别： 了解margin和padding和position三者区别,并且对于页面具备的影响margin的100%（父元素的width）以父级为参考,如果没有父级则为body体元,position不能使得元素换行，只能在同行显示，而margin和padding确可以使得元素换行 主要是圣杯的需要把三个标签都包含，而双飞翼确不需要 圣杯需要定位，而双飞翼不需要 圣杯（主要是margin出现问题）在页面大小切换下会出现样式问题，而双飞翼确不会，只是会使得页面中间的contern越来越小（大） 四、flex布局居中 只要是使用 * { margin: 0px; border: 0px; padding: 0px; } body { width: 100vw; height: 100vh; display: flex; justify-content: center; align-items: center; } .box { height: 200px; width: 200px; background: yellow; } 五、定位居中 .box { height: 200px; width: 200px; position: absolute; left: 50%; top: 50%; background: yellow; transform: translate(-50%, -50%); } Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-09 19:47:55 "},"gitbook/CSS-library/Animation.html":{"url":"gitbook/CSS-library/Animation.html","title":"动画animation","keywords":"","body":"CSS3动画属性的区别（Transitions, Transforms和Animation） 1. 介绍 CSS3动画相关的几个属性是：transition, transform, animation；我分别理解为过渡，变换，动画。虽意义相近，但具体角色不一。 transition指过渡啦，就是从a点都b点，就像过江坐渡轮，是有时间的，是连续的，一般针对常规CSS属性；transform指变换，就那几个固定的属性：旋转啦，缩放啦，偏移啦什么的，当独立于远房亲戚transition独自使用时，效果就是很干涩机械的旋转移动。要是配合transition属性，旋转啊什么的，就会很平滑。animation最先安家于Safari浏览器，自成一家，与transition和transform有老死不相往来之感，但是要说单挑的话，animation要比transition厉害些。 2.详情 2.1 transition 其作用是：平滑的改变CSS的值。无论是点击事件，焦点事件，还是鼠标hover，只要值改变了，就是平滑的，就是动画。于是乎，只要一个整站通用的class，就可以很轻松的渐进增强地实现动画效果，超有实用价值的说。 transiton属性是下面几个属性的缩写： transition-property 指定过渡的属性值，比如transition-property:opacity就是只指定opacity属性参与这个过渡。 transition-duration 指定这个过渡的持续时间 transition-delay 延迟过渡时间 transition-timing-function 指定过渡动画缓动类型，有ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(),其中，linear线性过度，ease-in由慢到快，ease-out由快到慢，ease-in-out由慢到快在到慢 例如下面这个很简单的例子： button { background: palegreen; border: none; outline: none; width: 100px; height: 30px; cursor: pointer; position: relative; z-index: 1; } button::before { content: ''; position: absolute; z-index: -1; top: 0; bottom: 0; left: 0; right: 0; height: 0; background: red; transform-origin: center bottom; transition: transform 0.4s ease-in-out; } button:hover::before { height: 100%; transform-origin: center top; } 查看 2.2 transform transform指变换，使用过photoshop的人应该知道里面的Ctrl+T自由变换。transform就是指的这个东西，拉伸，压缩，旋转，偏移。见下面示例代码： .trans_skew { transform: skew(35deg); } .trans_scale { transform:scale(1, 0.5); } .trans_rotate { transform:rotate(45deg); } .trans_translate { transform:translate(10px, 20px); } transform属性要是加上transition的过渡特性，那可就是如虎添翼，可以产生不少美妙的火花，例如下面这个例子，关键代码如下： .trans_effect { transition:all 2s ease-in-out; } .trans_effect:hover { transform:rotate(720deg) scale(2,2); } 三：animations @-webkit-keyframes resize { 0% { padding: 0; } 50% { padding: 0 20px; background-color:rgba(190, 206, 235, 0.2); } 100% { padding: 0 100px; background-color:rgba(190, 206, 235, 0.9); } } .anim_box:hover { animation-name: resize; animation-duration: 1.5s; animation-iteration-count: 4; animation-direction: alternate; animation-timing-function: ease-in-out; } Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-09 18:31:33 "},"gitbook/JavaScript-library/":{"url":"gitbook/JavaScript-library/","title":"JavaScript","keywords":"","body":"CSS Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/JavaScript-library/PointChange.html":{"url":"gitbook/JavaScript-library/PointChange.html","title":"bind,apply,call","keywords":"","body":"一、bind、apply与call三者区别 在JS中，这三者都是用来改变函数的this对象的指向的，他们有什么样的区别呢。 在说区别之前还是先总结一下三者的相似之处： 都是用来改变函数的this对象的指向的。 第一个参数都是this要指向的对象。 都可以利用后续参数传参。 那么他们的区别在哪里的，先看一个例子。 var xw = { name: \"小王\", gender: \"男\", age: 24, say: function () { alert(this.name + \" , \" + this.gender + \" ,今年\" + this.age); } } var xh = { name: \"小红\", gender: \"女\", age: 18 } xw.say(); 那么如何用xw的say方法来显示xh的数据呢。 对于call可以这样： xw.say.call(xh); 对于apply可以这样： xw.say.apply(xh); 而对于bind来说需要这样： xw.say.bind(xh)(); 总之：bind与apply、call最大的区别就是：bind不会立即调用，其他两个会立即调用，apply与call的区别是apply第二个是参数组，但是在确定的参数下，还是最好用call，call的效果会更高，但是在函数的延展性上使用apply更好 二、手写方法 2.1 手写一个call方法 考虑两点 第一个参数为undefined或null的时候，那么会转变为window 改变了this执行，让新的对象可以执行该函数。 Function.prototype.myCall = function (context) { // 判断是否是undefined和null if (typeof context === 'undefined' || context === null) { context = window } context.fn = this let args = [...arguments].slice(1) let result = context.fn(...args) delete context.fn return result } 2.2 apply Function.prototype.myApply = function (context) { if (typeof context === 'undefined' || context === null) { context = window } context.fn = this let args = arguments[1] let result if (args) { result = context.fn(...args) } else { result = context.fn() } delete context.fn return result } 2.3 bind实现 这里需要注意下，因为bind转换后的函数可以作为构造函数使用，此时this应该指向构造出的实例，而bind函数绑定的第一个参数。 Function.prototype.myBind = function (context) { if (typeof this !== 'function') { throw new TypeError('Error') } let _this = this let args = [...arguments].slice(1) return function F() { // 判断是否被当做构造函数使用 if (this instanceof F) { return _this.apply(this, args.concat([...arguments])) } return _this.apply(context, args.concat([...arguments])) } } Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-09 19:07:37 "},"gitbook/JavaScript-library/Currying.html":{"url":"gitbook/JavaScript-library/Currying.html","title":"柯里化","keywords":"","body":"一、通用版 function curry(fn) { var args = Array.prototype.slice.call(arguments, 1); return function () { var newArgs = args.concat(Array.prototype.slice.call(arguments)); return fn.apply(this, newArgs); } } 执行： function multiFn(a, b, c) { return a * b * c; } var multi = curry(multiFn); multi(2, 3, 4); 二、改进版 就题目而言，是需要执行三次函数调用，那么针对柯里化后的函数，如果传入的参数没有 3 个的话，就继续执行 curry 函数接收参数，如果参数达到 3 个，就执行柯里化了的函数。 function curry(fn, args) { var length = fn.length; var args = args || []; return function () { newArgs = args.concat(Array.prototype.slice.call(arguments)); if (newArgs.length 三、优化版 function multi() { var args = Array.prototype.slice.call(arguments); var fn = function () { var newArgs = args.concat(Array.prototype.slice.call(arguments)); return multi.apply(this, newArgs); } fn.toString = function () { return args.reduce(function (a, b) { return a * b; }) } return fn; } 最后这个其实是利用了toString()函数的返回值为String类型。返回当前对象的字符串形式。 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-09 17:38:01 "},"gitbook/HTTP-library/":{"url":"gitbook/HTTP-library/","title":"HTTP","keywords":"","body":"Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-09 19:50:35 "},"gitbook/HTTP-library/Code.html":{"url":"gitbook/HTTP-library/Code.html","title":"状态码","keywords":"","body":"HTTP常见状态码 2XX 成功 200 OK，表示从客户端发来的请求在服务器端被正确处理 204 No content，表示请求成功，但响应报文不含实体的主体部分 206 Partial Content，进行范围请求 3XX 重定向 301 moved permanently，永久性重定向，表示资源已被分配了新的 URL 302 found，临时性重定向，表示资源临时被分配了新的 URL 303 see other，表示资源存在着另一个 URL，应使用 GET 方法丁香获取资源 304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况 307 temporary redirect，临时重定向，和302含义相同 4XX 客户端错误 400 bad request，请求报文存在语法错误 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息 403 forbidden，表示对请求资源的访问被服务器拒绝 404 not found，表示在服务器上没有找到请求的资源 5XX 服务器错误 500 internal sever error，表示服务器端在执行请求时发生了错误 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-09 19:54:48 "},"gitbook/Regular-library/":{"url":"gitbook/Regular-library/","title":"Regular","keywords":"","body":"正则 1. 概念 正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。 2. 正则目的 给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）； 可以通过正则表达式，从字符串中获取我们想要的特定部分。 3. 正则特点 灵活性、逻辑性和功能性非常的强； 可以迅速地用极简单的方式达到字符串的复杂控制。 对于刚接触的人来说，比较晦涩难懂。 4. 正则的组成 5. 参考资料 了解正则的运行情况可以使用正则工具 地址 正则视频可以查看慕课网 正则初识（一）规则 Linux--shell脚本之正则表达式 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-28 17:39:13 "},"gitbook/Regular-library/composition.html":{"url":"gitbook/Regular-library/composition.html","title":"正则组成","keywords":"","body":"正则的组成 1. 字符类 字符 描述 \\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，n 匹配字符 n。\\n 匹配一个换行符。序列 \\\\ 匹配 \\ 而 \\( 则匹配 (。 \\d 匹配一个数字字符。等价于 [0-9]。 \\D 匹配一个非数字字符。等价于 [^0-9]。 \\w 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。 \\W 匹配非字母、数字、下划线。等价于 [^A-Za-z0-9_]。 . 匹配除换行符（\\n、\\r）之外的任何单个字符。 . 匹配除换行符（\\n、\\r）之外的任何单个字符。 [xyz] 字符集合。匹配所包含的任意一个字符。例如， [abc] 可以匹配 plain 中的 a。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， [^abc] 可以匹配 \"plain\" 中的p、l、i、n。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，[a-z] 可以匹配 a 到 z 范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，'a-z可以匹配任何不在a到z` 范围内的任意字符。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v] 。 \\S 匹配任何非空白字符。等价于 [^\\f\\ [^ \\f\\n\\r\\t\\v]。 2. 量词 量词：在正则中表现出现次数的 字符 描述 * 匹配前面的子表达式零次或多次。例如，zo 能匹配 \"z\" 以及 \"zoo\"。 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 、 \"does\" 中的 \"does\" 、 \"doxy\" 中的 \"do\" 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 \"Bob\" 中的 'o'，但能匹配 \"foooood\" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 {n,m} m 和 n 均为非负整数，其中n 3. 位置限定符 字符 描述 ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。 $ 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。 \\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。 \\B 匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\cx 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 5. 正则修饰符 字符 描述 i 忽略大小写 m 表示可以进行多行匹配，一般和$,^配合使用 g 全局查询 s 将字符串视为单行，换行符作为普通字符 ``` // i 使用 var str=\"bAcd\"; console.log(str.match(/a/i)) //如果不适用i不会匹配，使用i，忽略大小写，会匹配上A // g 使用 var str=\"abAcd\"; console.log(str.match(/a/gi)) //如果不适用g只会匹配上{a}，使用g，全局查询会匹配上[a,A] // m 使用 var str=\"bd76dfsdfsdfsdfs\\r\\nb76dsfsdb8fsdf\"; console.log(str.match(/^b./gm)); //如果不适用m只会匹配上{bd}，使用m表明可以进行多行匹配，全局查询会匹配上[bd,b7] // s 使用 var str=\"sbcpr\\nydddpray\"; console.log(str.match(/pr.y/gs)); //如果不适用s只会匹配上{pray}，使用m表明可以进行多行匹配，全局查询会匹配上[pr\\ny,pray] ``` Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-28 17:40:44 "},"gitbook/Regular-library/methods.html":{"url":"gitbook/Regular-library/methods.html","title":"正则方法","keywords":"","body":"方法 正则的方法包括正则的方法、js使用正则的方法 1. 正则的方法 1.1 test方法 该方法用来测试某个字符串是否与正则匹配，匹配就返回true，否则返回false。该方法接受一个字符串作为参数 ``` var reg=/boy(s)?\\s+and\\s+girl(s)?/gi; console.log(reg.test('boy and girl')); ``` 1.2 exec方法 该方法属于一个比较复杂的方法，它接受一个字符串，返回的是一个数组，数组中第0个元素是匹配的子字符串，第二个元素是正则中的第一个子分组匹配的结果（如果有子分组，即正则中存在用圆括号括起来的分组），第三个是正则中第二个子分组匹配的结果（如果有第二个子分组）...以此类推，如果没有正则子分组，那么该数组长度仅仅为1，就是匹配到的那个子字符串。同时，返回的这个数组同时还是一个对象，它拥有两个属性，分别为index表示当前匹配到的子字符串所处的位置，input属性表示被匹配的原始字符串。最后，该方法中的正则对象如果不是全局匹配，即没有g修饰符，则每次调用只会从字符串开头处匹配第一个结果，且每次调用结果都是一样的。只有指定为全局匹配，才能够按照从左往右依次去匹配，每次调用匹配一个结果，正则对象的lastIndex属性前进到本次匹配的末尾位置，下回再调用的时候，会从lastIndex处开始匹配而不是从头匹配。 ``` var reg=/(\\w)l(\\w)/g; var str=\"hello world hello 123 hello programmer hello test\"; var arr=reg.exec(str); while(arr){ console.dir(arr); console.log(\"lastIndex:\"+reg.lastIndex); arr=reg.exec(str); } ``` 2. js使用正则的方法 2.1 search方法 该方法是string对象的一个方法，用来查找第一次匹配的子字符串的位置，如果找到就返回一个number类型的index值，否则返回-1,它返回的只是第一次匹配的位置。 ``` var str=\"hello world\"; console.log(str.search(/o/g)); ``` 2.2 replace方法 该方法用来将字符串中的某些子串替换为需要的内容，接受两个参数，第一个参数可以为正则或者子字符串，表示匹配需要被替换的内容，第二个参数为被替换的新的子字符串。如果声明为全局匹配则会替换所有结果，否则只替换第一个匹配到的结果。 ``` var str=\"hello world,hello test\"; console.log(str.replace(/hello/g,'hi')); ``` 7.3 split方法 该方法主要用来将一个字符串拆分成一个数组，它接受一个正则或者子字符（串）作为参数，返回一个数组，简单情况下，我们不需要使用正则，只有在字符串拆分规则不统一的情况下才需要使用正则，如下： ``` var str=\"how|old*are you\"; var arr=str.split(/\\||\\*|\\s+/); console.log(arr); ``` 7.4. match方法 该方法接受一个正则作为参数，用来匹配一个字符串，它的输出结果在不是全局匹配的情况下和exec方法的结果一致即一个数组并带有额外的属性，如果采用全局匹配，则不返回任何和其被匹配字符串相关的信息，只返回匹配的结果。 ``` var reg3=/(\\w)s(\\w)/g; var str4=\"ws1estqsa\"; console.dir(str4.match(reg3)); ``` Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-27 16:16:03 "},"gitbook/Regular-library/used.html":{"url":"gitbook/Regular-library/used.html","title":"常用正则","keywords":"","body":"常用正则： 查看正则运行情况 2 到 9 位中文昵称：^[\\u4e00-\\u9fa5]{2,9}$ 只能是字母、数字和下划线，长度不限制一到多：^\\w+$ 允许 小写字母 a-z、大写字母 A-Z、数字 0-9、下划线 、 连接符 -，且长度在 6-18 位数：`/^[a-zA-Z0-9-]{6,18}$/` 必须包含数字+小写字母+大写字母的密码，且长度在8-10位之间：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$ 验证 Email允许有一个字符符合 [A-Za-z0-9] 之后可以为 [A-Za-z0-9-+.] + @ + 允许有一个字符符合 [A-Za-z0-9] 之后可以为 [A-Za-z0-9-.] + . + 允许有一个字符符合 [A-Za-z0-9] 之后可以有 [A-Za-z0-9-.] 的邮箱：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$ 验证身份证 18 位身份证号，尾数是数字或者字母 X：^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X)$ 15 或者 18 位身份证号，尾数可以是数字及 X 或者 x：(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$) 验证手机号 以 1 开头，第二位数是 3/4/5/7/8 的 11 位手机号码：^1[3|4|5|7|8|9]\\d{9}$ 移动号码：^134[0-8]\\d{7}$|^(?:13[5-9]|147|15[0-27-9]|178|1703|1705|1706|18[2-478])\\d{7,8}$ 电信号码：^(?:133|153|1700|1701|1702|177|173|18[019])\\d{7,8}$ 联通号码：^(?:13[0-2]|145|15[56]|176|1704|1707|1708|1709|171|18[56])\\d{7,8}|$ Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-28 18:08:46 "},"gitbook/Node-library/":{"url":"gitbook/Node-library/","title":"Node","keywords":"","body":"CSS Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/Mysql-library/":{"url":"gitbook/Mysql-library/","title":"Mysql","keywords":"","body":"CSS Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/Other-library/":{"url":"gitbook/Other-library/","title":"其他资料库","keywords":"","body":"CSS Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/Other-library/Markdown_Website/":{"url":"gitbook/Other-library/Markdown_Website/","title":"Markdown_Website","keywords":"","body":"CSS Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/Other-library/Markdown_Website/Markdown/":{"url":"gitbook/Other-library/Markdown_Website/Markdown/","title":"Markdown","keywords":"","body":"Markdown 学习 目录 一 Markdown介绍 1.1 什么是Markdown  1.2 Markdown是谁创造的？  1.3 为什么要使用Markdown 二 Markdown 语法  2.1 标题  2.2 无序列表  2.3 有序列表  2.4 区块引用  2.5 分割线  2.6 链接  2.7 图片  2.8 代码框  2.9 表格  2.10 强调  2.11 转义  2.12 删除线  2.13 缩略标签 三 结语 一 Markdown介绍 1.1 什么是Markdown？ Markdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式。 Markdown 文件的后缀为 .md。 1.2 Markdown是谁创造的？ 它是由 Aaron Swartz 和 John Gruber 共同设计， Aaron Swartz 就是那位（2013年1月11日）自杀，有着开挂一般人生经历的程序员。 维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 1.3 为什么要使用Markdown? 它是易读（看起来舒服&#x1F60C;）、易写（语法简单）、易更改（纯文本）。处处体现着极简主义的影子。 兼容HTML,可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown. 更方便清晰的组织你的电子邮件。（Markdown-here,Airmail）。 摆脱Word,txt！！！ 二 Markdown 语法 2.1 标题 用法介绍：标题可以像 HTML 一样使用一级至六级标题，使用 # 即可，一级标题的使用方法为：# 一级标题，几级标题就使用几个 #。 写法 #### 四级标题 ##### 五级标题 ###### 六级标题 演示： 四级标题 五级标题 六级标题 2.2 无序列表 用法介绍：无序列表可以使用 * + - 这三种格式，这里推荐使用*：* 列表1 写法 * 列表1 + 列表2 - 列表3 演示： 列表1 列表2 列表3 2.3 有序列表 用法介绍：有序列表使用数字1. **即可，如果开始数字是3，那这个列表就从3. \\**开始，第二条是4. *** 写法 1. 列表1 2. 列表2 3. 列表3 演示： 列表1 列表2 列表3 2.4 区块引用 用法介绍：区块引用使用 > 这个符号，空格后放文本即可：> 一级区块 写法 > 注意：区块引用的左边，有个竖线！ >> 注意：引用还可以嵌套使用，这是二级的引用，二级以上相信你也懂了 >>> 注意：这是三级嵌套，相信你知道怎么用了 演示： 注意：区块引用的左边，有个竖线！ 注意：引用还可以嵌套使用，这是二级的引用，二级以上相信你也懂了 注意：这是三级嵌套，相信你知道怎么用了 2.5 分割线 用法介绍：分割线使用三个及以上的 * 或者 - 或者 _ 都可，这里使用三个 *：*** 写法 *** --- ___ 演示： 2.6 链接 介绍：链接分为行内式和参数式这两种方法 2.6.1 行内式 写法 [webmryang 的网站](https://webmryang.github.io/) 演示： webmryang 的网站 2.6.2 参数式 写法 ``` [site]:https://webmryang.github.io \"网站\" [网站]:https://webmryang.github.io \"网站\" 这里是 [site]，这里是 [网站] ``` 演示： 这里是 site，这里是 网站 2.7 图片 用法介绍： 如果是本地图片，则支持绝对路径和相对路径 如果是网络图片，则可以使用 http://** 来引入 如果是 base64，怎么使用参考 markdown 引用 base64 写法 ![图片](https://qq.yh31.com/tp/zjbq/201901182223553205.gif) 演示： 2.8 代码框 介绍：代码框分为单行用和多行用这两种方法： 2.8.1 单行用 写法 `你好使用者，要看看` 演示： 你好使用者，要看看 2.8.2 多行用 写法 ``` 你好使用者，要看看 你好使用者，要看看 ``` 演示： 你好使用者，要看看 你好使用者，要看看 2.9 表格 介绍：表格有三种表示方法： 2.9.1 第一类表格 写法 | name | age | sex | | :---: | :--- | ---: | | webmryang | 23 | 男 | | 小杨 | 23 | 男 | 演示： name age sex webmryang 23 男 小杨 23 男 2.9.2 第二类表格 写法 | name | age | sex | | --- | --- | --- | | webmryang | 23 | 男 | | 小杨 | 23 | 男 | 演示： name age sex webmryang 23 男 小杨 23 男 2.9.3 第三类表格 写法 学号 | 姓名 | 分数 - | - | - 小明 | 男 | 75 小红 | 女 | 79 小陆 | 男 | 92 演示： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 2.10 强调 2.10.1 字体倾斜 写法 *字体倾斜* _字体倾斜_ 演示： 字体倾斜 字体倾斜 2.10.2 字体加粗 写法 **字体加粗** __字体加粗__ 演示： 字体加粗 字体加粗 2.11 转义 用法介绍：通过使用\\加上特殊字符，达到转义效果。 写法 * \\\\ * \\` * \\~ * \\* * \\_ * \\- * \\+ * \\. * \\! * …… 演示： \\ ` ~ * _ - + . ! …… 2.12 删除线 用法介绍：请删除我吧。 写法 ~~请删除我吧！~~ 演示： 请删除我吧！ 2.13 缩略标签 用法介绍缩略标签属于 HTML 中的内容，但是巧妙用在 Markdown 也是可行的。 写法 基础知识 被缩略 你还需要知道其他的吗？ 演示： 基础知识 被缩略 你还需要知道其他的吗？ 三 结语 至此，Markdown 语法介绍完毕，有兴趣的小伙伴继续去了解更深层次的 Markdown 语法吧！ Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-19 15:02:56 "},"gitbook/Other-library/Markdown_Website/GitBook/":{"url":"gitbook/Other-library/Markdown_Website/GitBook/","title":"GitBook 建站","keywords":"","body":"gitbook 1.1 gitbook介绍 GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书。所以我更喜欢把 GitBook 定义为文档格式转换工具。 市面上我们可以找到很多 Markdown 编辑器，比如 Typora、MacDown、Bear、MarkdownPad、MarkdownX、JetBrains’s IDE（需要安装插件）、Atom、简书、CSDN 以及 GitBook 自家的 GitBook Editor 等等。 但 GitBook 又与 Markdown 和 Git 息息相关，因为只有将它们结合起来使用，才能将它们的威力发挥到极致！因此，通常我们会选择合适的 Markdown 编辑工具以获得飞一般的写作体验；使用 GitBook 管理文档，预览、制作电子书；同时通过 Git 管理书籍内容的变更，并将其托管到云端（比如 GitHub、GitLab、码云，或者是自己搭建的 Git 服务器），实现多人协作。 1.2 gitbook优点 简单来说，GitBook + Markdown + Git 带来的好处有： 语法简单 兼容性强 导出方便 专注内容 团队协作 1.3 结论 当然，GitBook 不是万能的，当我们需要复杂排版时，依然需要依托于 Word 等工具。但不用担心，因为我们可以把 Markdown 格式的文档导出为 Word 格式，再进一步加工。 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-28 19:42:48 "},"gitbook/Other-library/Markdown_Website/GitBook/init.html":{"url":"gitbook/Other-library/Markdown_Website/GitBook/init.html","title":"环境搭建","keywords":"","body":"GitBook 初始化 gitbook是基于 node.js的命令工具，,首先需要安装并配置好node.js 环境,然后才能安装gitbook 相关工具. 1. gitbook 环境预检查 1.1 git 环境 git 是免费开源的分布式版本控制系统,主要用于电子书的更新管理和团队协作,如果不需要将电子书托管到github 网站上,则可以不安装 git . 如果打印出 git 版本信息,则表示本机已安装 git 环境,跳过此步骤. $ git --version git 安装配置教程请参考初识 git 1.2 node.js 环境 node.js 是 js 在服务端运行的环境基础,从而使得 js 从浏览器端延伸到服务端领域,而 gitbook 则是运行在 node.js 基础之上的命令行工具,因此必须先安装好 node.js 开发环境. 如果打印出 node.js 版本信息,则表示本机已安装 node.js 环境,跳过此步骤. $ node -v node.js 安装配置教程请参考 node 2. gitbook 安装 2.1 gitbook-cli安装 gitbook-cli 是 gitbook 的脚手架工具,帮助我们更方便构建 gitbook 应用,当然也可以直接安装 gitbook ,只不过那样的话,略显麻烦,不推荐. mac 上执行 $ sudo npm install -g gitbook-cli window 上执行 $sudo npm install -g gitbook-cli 安装成功后会带有 gitbook 命令,现在再次运行下 gitbook -V 查看版本信息. # 打印出 `CLI` 和 `GitBook` 版本信息即可,安装版本可能已经大于 `2.3.2` $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 2.2 安装 GitBook Editor gitbook官方客户端编辑器,支持 windows, mac 和 linux ,主要用于可视化编辑文档,组织文档结构. 下载相应平台的 GitBook Editor,正常安装即可. gitbook 的使用方法大致可以有三种,而 GitBook Editor 编辑器只是其中一种,所以这一步是可选的. 使用 gitbook-cli 脚手架提供的各种命令直接在命令行管理 gitbook,适合一定编程经验的软件从业人员. 使用 GitBook Editor 编辑器管理 gitbook ,适合无任何编程的文学创作者. 使用 gitbook.com 官网在线管理 gitbook ,适合不具备本地开发环境的萌新体验者. 3. gitbook命令 3.1 常用命令 安装 GitBook：npm i gitbook-cli -g 初始化 GitBook 项目：gitbook init 安装 GitBook 依赖：gitbook install 开启 GitBook 服务：gitbook serve //gitbook serve --port 2333 指定端口 打包 GitBook 项目：gitbook build GitBook 命令行查看：gitbook -help GitBook 版本查看：gitbook -V 3.2 目录介绍 当我们执行完 npm i gitbook-cli -g 后，就开始进行gitbook开发，找一个空文件夹，初始化一个 GitBook 项目：gitbook init，目录会生成一个 README.md 内容文件和一个 SUMMARY.md 目录文件如下。 - GitBook - README.md - SUMMARY.md SUMMARY.md [链接](链接地址) 表示跳转链接，即 GitBook 会根据你的 SUMMARY 自动帮你生成左侧菜单栏的目录 README.md 书写文档，在SUMMARY中显示 最后，我们在 终端 输入 gitbook serve 即可开启一个 localhost:4000 的服务，请在浏览器中输入 http://localhost:4000 即可访问服务。 4. 总结 gitbook 基于 node.js 开发环境,因此首先要安装好 nodejs 环境,其次再使用 node.js 提供的 npm 包管理工具来安装 gitbook. 只需运行 sudo npm install -g gitbook-cli 即可安装,接着运行 gitbook -V 查看安装版本信息确认已经安装成功. 至此 gitbook 的必要开发环境已经准备妥当,接下来让我们赶紧体验一下 gitbook 的魅力吧! Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-25 17:31:47 "},"gitbook/Other-library/Markdown_Website/GitBook/plugins.html":{"url":"gitbook/Other-library/Markdown_Website/GitBook/plugins.html","title":"插件","keywords":"","body":"插件 1.book.json 配置 1.1 title 设置书本的标题 \"title\": \"webMrYang的文档库\" 1.2 author 作者的相关信息 \"author\": \"webMrYang\" 1.3 description 本书的简单描述 \"description\": \"前端一些资料\" 1.4 language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 例如，配置使用简体中文 \"language\": \"zh-hans\" 1.5 links 在左侧导航栏添加链接信息 \"links\" : { \"sidebar\" : { \"Home\" : \"https://www.baidu.com\" } } 1.6 styles 自定义页面样式， 默认情况下各generator对应的css文件 \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如使 标签有下边框， 可以在website.css中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } 1.7 plugins 配置使用的插件 \"plugins\": [ \"-search\", \"back-to-top-button\", \"expandable-chapters-small\", \"insert-logo\" ] 其中\"-search\"中的 - 符号代表去除默认自带的插件 Gitbook默认自带有5个插件： highlight： 代码高亮 search： 导航栏查询功能（不支持中文） sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 1.8 pluginsConfig 配置插件的属性 例如配置prism的属性： \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ], \"lang\": { \"shell\": \"bash\" } }, 2 插件安装 用法：在book.json中添加\"plugins\"和\"pluginConfig\"字段。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-插件名，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） 2.1 back-to-top-button 回到顶部 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-back-to-top-button，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"back-to-top-button\" ] } 效果如下图所示： 2.2 expandable-chapters 导航目录折叠 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-expandable-chapters，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"expandable-chapters\" ] } 2.3 代码复制 2.3.1. code 代码添加行号&复制按钮 为代码块添加行号和复制按钮，复制按钮可关闭 单行代码无行号。 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-chapter-fold，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"code\" ] } 如果想去掉复制按钮，在book.json的插件配置块更新： { \"plugins\" : [ \"code\" ], \"pluginsConfig\": { \"code\": { \"copyButtons\": false } } } 效果如下图所示： 2.3.2. copy-code-button 代码复制按钮 为代码块添加复制的按钮。 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-copy-code-button，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"copy-code-button\" ] } 效果如下图所示： 2.4 search-pro 高级搜索（支持中文） 支持中文搜索, 在使用此插件之前，需要将默认的search和lunr 插件去掉。 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-search-pro，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\" ] } 2.5 splitter 侧边栏宽度可调节 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-splitter，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"splitter\" ] } 效果如下图所示： 2.6 sharing-plus 多一些分享方式 分享当前页面，比默认的 sharing 插件多了一些分享方式。 npm仓库地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-sharing-plus { \"plugins\": [\"-sharing\", \"sharing-plus\"], \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"pocket\": false, \"qq\": false, \"qzone\": true, \"twitter\": false, \"weibo\": true, \"all\": [ \"douban\", \"facebook\", \"google\", \"instapaper\", \"linkedin\",\"twitter\", \"weibo\", \"messenger\",\"qq\", \"qzone\",\"viber\",\"whatsapp\" ] } } } 其中： 为true的代表直接显示在页面顶端，为false的不显示，不写默认为false \"all\"中代表点击分享符号显示出来的 效果如下图所示： 2.7 github 在右上角添加github图标 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-github，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } 效果如下图所示： 2.8 tbfed-pagefooter 页面添加页脚 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-tbfed-pagefooter，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy xxxx.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 效果如下图所示： 2.9 donate 打赏插件 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-donate，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"微信收款的二维码URL\", \"alipay\": \"支付宝收款的二维码URL\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } } 2.10 theme-comscore 为Table添加样式 npm地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-theme-comscore，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"theme-comscore\" ] } 效果如下图所示： 2.11 prism 为 GitBook 的 Code 添加更好看的样式 prism：为 GitBook 的 Code 添加更好看的样式，使用它的时候记得屏蔽 GitBook 默认的 highlight 插件，即通过 （-highlight 表示，下面出现 - 的插件也一样） npm地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-prism，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ], \"lang\": { \"shell\": \"bash\" } } } } 2.12 anchor-navigation-ex 生成菜单。 expandable-chapters：自动生成菜单,并跳转顶部 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-anchor-navigation-ex，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false } } } 效果如下图所示： 2.13 sectionx 将页面分块显示。 用于将页面分成多个部分，并添加按钮以允许读者控制每个部分的可见性。 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-sectionx，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"sectionx\" ] } 使用方式 参数 说明 data-title 该部分的标题，它将显示为bootstrap面板的标题（大小为h2）。请注意，您不能使用\"标题中的字符，请\"改用。 data-id 对按钮控制起作用。 data-show 默认表示面板内容是否可见的布尔值。true：默认情况下，面板内容对用户可见，面板标题可以单击。false：默认情况下，面板内容对用户隐藏，面板标题不可点击，只能通过添加自定义按钮查看 data-nopdf 一个布尔值，表示该部分是否将隐藏在pdf导出中。true：面板不会显示在.pdf或.epub中。 data-collapse 一个布尔值，表示默认情况下是否打开（但仍然可见）该部分。true：默认情况下，面板内容对用户可见，但已关闭。false：默认情况下，面板内容对用户隐藏，但已打开（默认设置）。 控制按钮 标签 说明 class 该按钮必须属于类“section”。 target 当按下时，将切换id为target的部分//这里就是用到上面的的data-id show 隐藏目标部分时按钮上的文本。 hide 目标部分可见时按钮上的文本。 example： 内容部分2 内容部分2 2.14 baidu-tongji 添加百度统计。 npm地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-baidu-tongji，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"baidu-tongji\" ], \"pluginsConfig\": { \"baidu-tongji\": { \"token\": \"f3f331c21843f7b950e103f51fbabc60\" } } } 2.15 favicon 更改网站的 favicon.ico。 npm地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-favicon，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\",//首先，shortcut通常可以被所有可以显示favicon的浏览器读取。 \"bookmark\": \"assets/images/favicon.ico\",//在收藏夹中显示自己的图标 \"appleTouch\": \"assets/images/apple-touch-icon.png\",//是一个类似网站favicon的图标文件，用来在iphone和iPad上创建快捷键时使用 \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } 2.16 待做项☑。 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-todo，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"todo\" ] } 使用示例： * [ ] write some articles * [x] drink a cup of tea [ ] write some articles [x] drink a cup of tea 2.17 Codeblock显示所包含文件的内容。 使用代码块的格式显示所包含文件的内容. 该文件必须存在。插件提供了一些配置，可以区插件官网查看。如果同时使用 ace 和本插件，本插件要在 ace 插件前面加载。 CodeblockNPM地址 aceNPM地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-include-codeblock gitbook-plugin-ace，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"include-codeblock\", 'ace' ], \"pluginsConfig\": { \"include-codeblock\": { \"template\": \"ace\", \"unindent\": \"true\", \"theme\": \"monokai\" } } } 使用示例： Example of code \\[import\\](./test.js) Example of code const arr = { \"plugins\": [ \"include-codeblock\" ], \"pluginsConfig\": { \"include-codeblock\": { \"template\": \"ace\", \"unindent\": \"true\", \"theme\": \"monokai\" } } } 2.18 gitalk 评论插件。 gitalk 利用 github 的开发者接口授权,将讨论区的 issue 变成评论区,和 github 结合的如此紧密,适合用源码托管到 github 这类情况. 我们在需要评论的页面中加入下面代码 var gitalk = new Gitalk({ \"clientID\": \"8c2f22bd64d1ea012ac5\", \"clientSecret\": \"992cdea444e1503ceac91bfd74907b37e590a159\", \"repo\": \"webmryang.github.io\", \"owner\": \"WebMrYang\", \"admin\": [\"WebMrYang\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); 字段意思： 1. `clientID` ：GitHub 开发者设置，客户端连接标识。 2. `clientSecret`：GitHub 开发者设置，客户端秘钥。 3. `repo`：GitHub 仓库名，我们的就是 document-library 啦。 4. `owner`：GitHub 仓库所有者，就是我 GitHub 账户：`LiangJunrong`。 5. `admin`：GitHub 仓库管理者，还是我的 GitHub 账户：`LiangJunrong`。（支持数组，多个管理者） 6. `id`：页面的唯一标识，默认值: `location.href` 7. `distractionFreeMode`：类似 Facebook 评论框的全屏遮罩效果,默认值: `false` [官方配置](https://github.com/gitalk/gitalk#install) GitHub开发授权应用 3 插件 - 参考文献 GitBook 搭建 GitBook插件整理 gitbook 入门教程之实用插件 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-27 15:47:10 "},"gitbook/Other-library/Markdown_Website/GitBook/build.html":{"url":"gitbook/Other-library/Markdown_Website/GitBook/build.html","title":"发布","keywords":"","body":"发布 已经写好项目，就可以进行打包，发布了 HTML:gitbook build [书籍路径] [输出路径] PDF: gitbook pdf ./ ./mybook.pdf epub gitbook epub ./ ./mybook.epub mobi gitbook mobi ./ ./mybook.mobi 然后，部署到 GitHub(教程) 上了。 最后，我们查看下我们的部署页面(地址)： Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-25 17:39:23 "},"gitbook/Other-library/Markdown_Website/GitBook/question.html":{"url":"gitbook/Other-library/Markdown_Website/GitBook/question.html","title":"开发问题记录","keywords":"","body":"GitBook 开发问题记录 1. 在使用 gitbook-cli 初始化后，使用插件后报错 gitbook serve和gitbook build都报错 Error: ENOENT: no such file or directory, stat ‘C:*demo_book_book\\gitbook\\gitbook-plugin-fontsettings\\fontsettings.js’ 原来是一个Bug（Vesion：3.2.3）。 https://github.com/GitbookIO/gitbook/issues/1309 解决办法如下。 1、用户目录下找到以下文件。 .gitbook\\versions\\3.2.3\\lib\\output\\website\\copyPluginAssets.js Replace all confirm: true with confirm: false 2、执行gitbook fetch 2.6.7 2. gitbook使用gitalk时报Error: Not Found. 这个是因为配置的gitalk中的repo配置错误，可以配置为你的用户名.github.io Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-25 17:15:17 "},"gitbook/Other-library/Markdown_Website/GitHub/":{"url":"gitbook/Other-library/Markdown_Website/GitHub/","title":"GitHub 发布","keywords":"","body":"GitHub 学习 1. 什么是 GitHub Pages？ GitHub Pages 是一个通过 GitHub 项目/仓库 进行部署的，以 username.github.io 的形式生成用户的托管平台。 通过 GitHub Pages，用户只需要把自己的内容在本地编辑好，然后推送到 GitHub 仓库即可。 2. github pages好处 使用零成本: github pages 集成在 github 中, 直接和代码管理绑定在一起, 随着代码更新自动重新部署, 使用非常方便. 免费: 免费提供 username.github.io 的域名, 免费的静态网站服务器. 无数量限制: github pages 没有使用的数量限制, 每一个 github repository 都可以部署为一个静态网站. 3. 搭建 3.1 新建仓库 打开 GitHub 页面，注册号用户后，新建仓库（New repository），在仓库名（Repository name）中输入 username.github.io，例如 webmryang 的就是：webmryang.github.io，然后点击 Create repository 即可创建一个部署好的环境。(用户名大小生成网址时都是小写) 3.2 Clone 项目 clone项目到本地： 下载的时候选择ssh下载，可以配置ssh免密登录 3.3 上传项目到 GitHub 在项目中加入一个html页面执行一下操作： ``` git add . git commit -m 'github' git push ``` 3.4 打开 用户名.github.io 打开 用户名.github.io 3.5 查看Settings 在settings中也可以查看项目在网站上的真实的网址 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-26 15:56:01 "},"gitbook/Other-library/SSH/":{"url":"gitbook/Other-library/SSH/","title":"SSH","keywords":"","body":"SSH 1. 概念 SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括、Linux以及其他平台，都可运行SSH。 2. 安全验证 SSH验证：从客户端来看，SSH提供两种级别的安全验证。 第一种级别（基于口令的安全验证） 只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。 第二种级别（基于密匙的安全验证） 需要依靠密匙，也就是你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务器就用公用密匙加密“质询”（challenge）并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。 用这种方式，你必须知道自己密匙的口令。但是，与第一种级别相比，第二种级别不需要在网络上传送口令。 3. 命令 3.1 查看当前电脑所有的ssh:ls -al ~/.ssh 3.2 一台电脑上github和gitlab配置ssh 如果没有生成过.ssh文件，就要执行 $ ssh-keygen -t rsa -C \"email@email.com\" 来创建.ssh，如果当前是为github生成，使用github的邮箱，如果是gitlab则输入gitlab的邮箱; 下面你会看到下图，如果只是配置一个github或者gitlab 直接回车就可以了，如果是想同时配置则需要修改生成的id_rsa，以上面为例子，可以输入 /c/Users/Administrator/.ssh/github_id_rsa 后回车,这里的github_id_rsa你可以自己去定义 接下来直接回车就ssh的秘钥就生成了 如果是自己输入了秘钥名称则需要配置一个config文件,里面配置如下(其中.ssh目录如下) # gitlab Host gitlab.com HostName gitlab.com PreferredAuthentications publickey IdentityFile ~/.ssh/id-rsa # github Host github.com HostName github.com # User WebMrYang PreferredAuthentications publickey IdentityFile ~/.ssh/github_id_rsa 当完成以上的ssh秘钥生成后，我们就可以给github或者gitlab来配置公钥了，公钥的后缀是.pub,复制.pub文件中的公钥，登陆你的github帐户。点击你的头像，然后 Settings -> 左栏点击 SSH and GPG keys -> 点击 New SSH key新建公钥title可以随便输key就是你刚刚新建的公钥 可以测试下 ssh git@github.com如果输出Hi xxx! You've successfully authenticated, but GitHub does not # provide shell access. Connection to github.com closed.说明成功了如图： Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-26 18:14:12 "},"gitbook/Other-library/Interview/":{"url":"gitbook/Other-library/Interview/","title":"面试","keywords":"","body":"1. 谈谈你对前端性能优化的理解 对数据进行异步加载 开启GZip，精简JavaScript，移除重复脚本，图像优化，将icon做成字体 使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存 1. html部分 要避免代码的深层级嵌套。因为层级越深的节点在初始化时更占内存。 尽量不要使用h5摒弃的iframe标签，因为在页面加载的时候iframe标签会阻塞父文档onload事件的触发，这恰恰影响了初始化UI 诸如img、link、script等元素的src或href属性的值不为空，因为就算我们写为src=\"\"浏览器仍会发送http请求 为页面中的图片设置宽高，这样做的好处是在页面加载完前就完成了布局，如若未指定宽高，在图片加载后还要调整其大小，影响时间。 在html文档开始就指定文档字符集，这样做的目的是在有助于浏览器加载时就能立即解析html代码 2. css部分： 将样式表置顶，这样做的好处是文档加载完毕之前样式就已经加载完，不用等页面加载完毕后再重新加载样式 避免使用css表达式，避免重定向 使用外部css并且精简css，移除无用的css样式 用link来代替@important 3. js部分 将脚本置底，避免script标签加载的时候页面等待加载 使用外部脚本以及精简后的去除重复的脚本 尽量减少dom访问，在《高性能JavaScript》中这么比喻：“把DOM看成一个岛屿，把JavaScript(ECMAScript)看成另一个岛屿，两者之间以一座收费桥连接”。所以每次访问DOM都会教一个过桥费，而访问的次数越多，交的费用也就越多。所以一般建议尽量减少过桥次数。 使用json格式来进行数据交换，因为JSON是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。同时，JSON是 JavaScript原生格式，这意味着在 JavaScript 中处理 JSON数据不需要任何特殊的 API 或工具包。 2. 网站重构的理解 重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。 使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的) 对于移动平台的优化，针对于SEO进行优化 减少代码间的耦合，让代码保持弹性 压缩或合并或拆分JS、CSS、image等前端资源 3. 对前端界面工程师这个职位是怎么样理解的？ 前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好 参与项目，快速高质量完成实现效果图，精确到1px； 与团队成员，UI设计，产品经理的沟通； 做好的页面结构，页面重构和用户体验； 处理hack，兼容、写出优美的代码格式； 针对服务器的优化、拥抱最新前端技术 3. 平时如何管理你的项目？ a. 先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等； b. 编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）； c. 标注样式编写人，各模块都及时标注（标注关键样式调用的地方）； d. 页面进行标注（例如 页面 模块 开始和结束）； e. CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）； f. JS 分文件夹存放 命名以该JS功能为准的英文翻译。 g. 图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理 20.如何管理前端团队? 请自行根据自己情况做回答，这个没有标准答案。 21.最近在学什么？能谈谈你未来3，5年给自己的规划吗？ 请自行根据自己情况做回答，这个没有标准答案。 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 11:39:34 "},"gitbook/Other-library/Interview/CSS/":{"url":"gitbook/Other-library/Interview/CSS/","title":"CSS","keywords":"","body":"1. 请简述盒模型 IE6盒子模型与W3C盒子模型。 文档中的每个元素被描绘为矩形盒子。盒子有四个边界：外边距边界margin, 边框边界border, 内边距边界padding与内容边界content。 CSS3中有个box-sizing属性可以控制盒子的计算方式， content-box：padding和border不被包含在定义的width和height之内。对象的实际宽度等于设置的width值和border、padding之和。（W3C盒子模型） border-box：padding和border被包含在定义的width和height之内。对象的实际宽度就等于设置的width值。（IE6盒子模型） 2. 边距重叠解决方案(BFC) 首先要明确BFC是什么意思，其全英文拼写为 Block Formatting Context 直译为“块级格式化上下文” 1. BFC的原理 内部的box会在垂直方向，一个接一个的放置 每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反） box垂直方向的距离由margin决定，属于同一个BFC的两个相邻box的margin会发生重叠 BFC的区域不会与浮动区域的box重叠 BFC是一个页面上的独立的容器，外面的元素不会影响BFC里的元素，反过来，里面的也不会影响外面的 计算BFC高度的时候，浮动元素也会参与计算 2. 怎么取创建BFC float属性不为none（脱离文档流） position为absolute或fixed display为inline-block,table-cell,table-caption,flex,inine-flex overflow不为visible 根元素 3. 应用场景 自适应两栏布局 清除内部浮动 防止垂直margin重叠 *{ margin:0; padding:0; } .top{ background: #0ff; height:100px; margin-bottom:30px; } .bottom{ height:100px; margin-top:50px; background: #ddd; } 上 margin-bottom:30px; 下 margin-top:50px; 上 margin-bottom:30px; 下 margin-top:50px; Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 10:32:12 "},"gitbook/Other-library/Interview/JS/":{"url":"gitbook/Other-library/Interview/JS/","title":"JS","keywords":"","body":"1. Cookies，Web Storage(LocalStorage,SessionStorage) Cookies：浏览器均支持，容量为4KB;Web Storage：HTML5，容量为5M Web Storage拥有setItem,getItem等方法，cookie需要前端开发者自己封装setCookie，getCookie Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，在每次请求一个新的页面的时候都会被发送过去；而Web Storage仅仅是为了在本地“存储”数据而生 sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁，是会话级别的存储；localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。 每个特定的域名下最多生成的cookie个数（IE6：20;IE6以后50；chrome和Safari没有做硬性限制）有限制；IE和Opera 会清理近期最少使用的cookie，Firefox会随机清理cookie 由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题，除非用HTTPS。 可以使用HttpOnly提升Cookie安全性。httponly 不支持读写，浏览器不允许脚本操作document.cookie去更改cookie，一般情况下都应该设置这个为true，这样可以避免被XSS攻击拿到cookie 2. 使用哪些工具来测试代码的性能 JSPerf, Dromaeo 3. 一次js请求一般情况下有哪些地方会有缓存处理？ DNS缓存：短时间内多次访问某个网站，在限定时间内，不用多次访问DNS服务器。 CDN缓存：内容分发网络（人们可以在就近的代售点取火车票了，不用非得到火车站去排队） 浏览器缓存：浏览器在用户磁盘上，对最新请求过的文档进行了存储。 服务器缓存：将需要频繁访问的Web页面和对象保存在离用户更近的系统中，当再次访问这些对象的时候加快了速度。 4. AMD和CMD 规范的区别？ 查看 AMD 提前执行依赖 - 尽早执行，requireJS 是它的实现。 CMD 按需执行依赖 - 懒执行，seaJS 是它的实现 5. JavaScript 的同源策略 同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。 指一段脚本只能读取来自同一来源的窗口和文档的属性。 6. WEB应用从服务器主动推送Data到客户端有那些方式？ html5 websoket WebSocket 通过 Flash XHR长时间连接 CORS 不可见的Iframe Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 14:46:39 "},"gitbook/Other-library/Interview/HTTP/":{"url":"gitbook/Other-library/Interview/HTTP/","title":"HTTP","keywords":"","body":"1. 讲讲输入完网址按下回车，到看到网页这个过程中发生了什么 用户输入url地址，浏览器根据域名寻找IP地址 浏览器向服务器发送http请求，如果服务器段返回以301之类的重定向，浏览器根据相应头中的location再次发送请求 服务器端接受请求，获取html代码，返回给浏览器，这时的html页面代码可能是经过压缩的 浏览器接收服务器响应结果，如果有压缩则首先进行解压处理，紧接着就是页面解析渲染 DNS 解析->TCP 连接->HTTP 请求抛出->服务端处理请求，HTTP 响应返回->浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户 解析渲染该过程主要分为以下步骤： 解析HTML 构建DOM树 DOM树与CSS样式进行附着构造呈现树 布局 绘制 Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 09:37:51 "},"gitbook/Other-library/Interview/Vue/":{"url":"gitbook/Other-library/Interview/Vue/","title":"Vue","keywords":"","body":"Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 08:59:17 "},"gitbook/Other-library/Interview/React/":{"url":"gitbook/Other-library/Interview/React/","title":"React","keywords":"","body":"Copyright © webMrYang.top 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 08:59:22 "}}